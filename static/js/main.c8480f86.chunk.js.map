{"version":3,"sources":["components/Cell.js","components/Board.js","components/Game.js","components/Header.js","components/Footer.js","components/App.js","reportWebVitals.js","reducers/index.js","reducers/board-data-reducer.js","reducers/game-won-reducer.js","reducers/mine-count-reducer.js","reducers/height-reducer.js","reducers/mines-reducer.js","reducers/width-reducers.js","index.js"],"names":["Cell","this","props","value","isRevealed","isMine","neighbor","isFlagged","className","ref","onClick","onContextMenu","cMenu","getValue","React","Component","Board","console","log","data","mineArray","map","dataRow","dataItem","push","dimension","Math","floor","random","height","width","mines","i","j","x","y","isEmpty","plantMines","getNeighbors","randomX","randomY","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","boardData","dispatch","action","type","setState","revealEmpty","win","revealBoard","alert","getHidden","length","gameWon","mineCount","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","handleCellClick","handleContextMenu","renderBoard","connect","state","Game","handleGameStart","parseInt","document","getElementById","WrappedComponent","prototype","initBoardData","data-tip","data-for","id","place","effect","min","max","placeholder","Header","Fragment","Footer","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.c8480f86.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Cell extends React.Component {\r\n  \r\n  getValue() {\r\n  if (!this.props.value.isRevealed){\r\n    return this.props.value.isFlagged ? \"ðŸš©\" : null;\r\n  }\r\n  if (this.props.value.isMine) {\r\n    return \"ðŸ’£\";\r\n  }\r\n  if(this.props.value.neighbor === 0 ){\r\n    return null;\r\n  }\r\n  return this.props.value.neighbor;\r\n}\r\n\r\nrender(){\r\n  let className = \"cell\" + (this.props.value.isRevealed ? \"\" : \" hidden\") + (this.props.value.isMine ? \" is-mine\" : \"\") + (this.props.value.isFlagged ? \" is-flag\" : \"\");\r\n\r\n  return (\r\n    <div ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu}>\r\n      {this.getValue()}\r\n    </div>\r\n  );\r\n}           \r\n}\r\nexport default Cell; ","import React from 'react';\r\nimport Cell from './Cell';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Board extends React.Component {\r\n  constructor(props){\r\n    console.log('in constructor') \r\n    super(props);\r\n    // const {dispatch} = this.props;\r\n    // const action = {\r\n    //   type: 'INITIALIZE_BOARD',\r\n    //   boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n    //   gameWon: false,\r\n    //   mineCount: this.props.mines,\r\n    // }\r\n    // dispatch(action);\r\n    // console.log(action) \r\n    // this.state = {\r\n    //   boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n    //   gameWon: false,\r\n    //   mineCount: this.props.mines,\r\n    // };\r\n  }\r\n  \r\n\r\n  /* Helper Functions */\r\n  // get mines\r\n  getMines(data) {\r\n    let mineArray = [];\r\n    console.log(\"data \", data);\r\n    data.map(dataRow => {\r\n      \r\n      dataRow.map((dataItem) => {\r\n        if (dataItem.isMine) {\r\n          mineArray.push(dataItem);\r\n        }\r\n        \r\n      });\r\n      console.log(\"row \", dataRow);\r\n    });\r\n    return mineArray;\r\n  }\r\n\r\n  // get Flags\r\n  getFlags(data) {\r\n    let mineArray = [];\r\n\r\n    data.map(dataRow => {\r\n      dataRow.map((dataItem) => {\r\n        if (dataItem.isFlagged) {\r\n          mineArray.push(dataItem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return mineArray;\r\n  }\r\n\r\n  // get Hidden cells\r\n  getHidden(data) {\r\n    let mineArray = [];\r\n\r\n    data.map(dataRow => {\r\n      dataRow.map((dataItem) => {\r\n        if (!dataItem.isRevealed) {\r\n          mineArray.push(dataItem);\r\n        }\r\n      });\r\n    });\r\n\r\n    return mineArray;\r\n  }\r\n\r\n  // // get random number given a dimension\r\n  getRandomNumber(dimension) {\r\n    // return Math.floor(Math.random() * dimension);\r\n    return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n  }\r\n\r\n  // Gets initial board data\r\n  initBoardData(height, width, mines) {\r\n    let data = [];\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      data.push([]);\r\n      for (let j = 0; j < width; j++) {\r\n        data[i][j] = {\r\n          x: i,\r\n          y: j,\r\n          isMine: false,\r\n          neighbor: 0,\r\n          isRevealed: false,\r\n          isEmpty: false,\r\n          isFlagged: false,\r\n        };\r\n      }\r\n    }\r\n    data = this.plantMines(data, height, width, mines);\r\n    data = this.getNeighbors(data, height, width);\r\n    //console.log(data);\r\n    return data;\r\n  }\r\n\r\n  // plant mines on the board\r\n  plantMines(data, height, width, mines) {\r\n    let randomX, randomY, minesPlanted = 0;\r\n\r\n    while (minesPlanted < mines) {\r\n      randomY = this.getRandomNumber(width);\r\n      randomX = this.getRandomNumber(height);\r\n      if (!(data[randomX][randomY].isMine)) {\r\n        data[randomX][randomY].isMine = true;\r\n        minesPlanted++;\r\n      }\r\n    }\r\n    return (data);\r\n  }\r\n\r\n  // get number of neighboring mines for each board cell\r\n  getNeighbors(data, height, width) {\r\n    let updatedData = data, index = 0;\r\n\r\n    for (let i = 0; i < height; i++) {\r\n      for (let j = 0; j < width; j++) {\r\n        if (data[i][j].isMine !== true) {\r\n          let mine = 0;\r\n          const area = this.traverseBoard(data[i][j].x, data[i][j].y, data, height,width);\r\n          area.map(value => {\r\n            if (value.isMine) {\r\n              mine++;\r\n            }\r\n          });\r\n          if (mine === 0) {\r\n            updatedData[i][j].isEmpty = true;\r\n          }\r\n          updatedData[i][j].neighbor = mine;\r\n        }\r\n      }\r\n    }\r\n    return (updatedData);\r\n  };\r\n\r\n  // looks for neighboring cells and returns them\r\n  traverseBoard(x, y, data, height, width) {\r\n    const el = [];\r\n    //console.log('travis props',this.props)\r\n    \r\n    // top left\r\n    if (x > 0 && y > 0) {\r\n      el.push(data[x - 1][y - 1]);\r\n    }\r\n    // up\r\n    if (x > 0) {\r\n      el.push(data[x - 1][y]);\r\n    }\r\n    // top right\r\n    if (x > 0 && y <width - 1) {  \r\n      el.push(data[x - 1][y + 1]);\r\n    }\r\n    // right\r\n    if (y < width - 1) {\r\n      el.push(data[x][y + 1]);\r\n    }\r\n    // bottom right\r\n    if (x < height - 1 && y < width - 1) {\r\n      el.push(data[x + 1][y + 1]);\r\n    }\r\n    // down\r\n    if (x < height - 1) {\r\n      el.push(data[x + 1][y]);\r\n    }\r\n    // bottom left\r\n    if (x < height - 1 && y > 0) {\r\n      el.push(data[x + 1][y - 1]);\r\n    }\r\n    // left\r\n    if (y > 0) {\r\n      el.push(data[x][y - 1]);\r\n    }\r\n    return el;\r\n  }\r\n\r\n  // reveals the whole board\r\n  revealBoard() {\r\n    let updatedData = this.props.boardData;\r\n    updatedData.map((dataRow) => {\r\n      dataRow.map((dataItem) => {\r\n        dataItem.isRevealed = true;\r\n      });\r\n    });\r\n\r\n    const {dispatch} = this.props; \r\n    const action = {\r\n      type: 'UPDATE_BOARD',\r\n      boardData: updatedData,   \r\n    }\r\n    console.log(action)\r\n    dispatch(action);\r\n\r\n////\r\n    this.setState({\r\n      boardData: updatedData\r\n    })\r\n    //////\r\n  }\r\n\r\n  /* reveal logic for empty cell */\r\n  revealEmpty(x, y, data) {\r\n    console.log('reveal empty', this.props);\r\n    let area = this.traverseBoard(x, y, data, this.props.height, this.props.width);\r\n    area.map(value => {\r\n      if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n        data[value.x][value.y].isRevealed = true;\r\n        if (value.isEmpty) {\r\n          this.revealEmpty(value.x, value.y, data);\r\n        }\r\n      }\r\n    });\r\n    return data;\r\n  }\r\n\r\n  // Handle User Events\r\n  handleCellClick(x, y) {\r\n    let win = false;\r\n    console.log(\"this \", this.props.boardData[x][y]);\r\n    // check if revealed. return if true.\r\n    if (this.props.boardData[x][y].isRevealed) {\r\n      return null;\r\n    }\r\n\r\n    // check if mine. game over if true\r\n    if (this.props.boardData[x][y].isMine) {\r\n      this.revealBoard();\r\n      alert(\"game over\");\r\n    }\r\n\r\n    let updatedData = this.props.boardData;\r\n    updatedData[x][y].isFlagged = false;\r\n    updatedData[x][y].isRevealed = true;\r\n\r\n    if (updatedData[x][y].isEmpty) {\r\n      updatedData = this.revealEmpty(x, y, updatedData);\r\n    }\r\n\r\n    if (this.getHidden(updatedData).length === this.props.mines) {\r\n      win = true;\r\n      this.revealBoard();\r\n      alert(\"You Win\");\r\n    } \r\n    const {dispatch} = this.props; \r\n    const action = {\r\n      type: 'CELL_CLICK',\r\n      boardData: updatedData,   \r\n      gameWon: false,\r\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n    }\r\n    console.log(action)\r\n    dispatch(action);\r\n    //////\r\n    this.setState({\r\n      boardData: updatedData,\r\n      mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n      gameWon: win,\r\n    });\r\n    ////////\r\n  }\r\n\r\n  handleContextMenu(e, x, y) {\r\n    e.preventDefault();\r\n    let updatedData = this.props.boardData;\r\n    let mines = this.props.mineCount;\r\n    let win = false;\r\n\r\n    // check if already revealed\r\n    if (updatedData[x][y].isRevealed) return;\r\n\r\n    if (updatedData[x][y].isFlagged) {\r\n      updatedData[x][y].isFlagged = false;\r\n      mines++;\r\n    } else {\r\n      updatedData[x][y].isFlagged = true;\r\n      mines--;\r\n    }\r\n\r\n    if (mines === 0) {\r\n      const mineArray = this.getMines(updatedData);\r\n      const FlagArray = this.getFlags(updatedData);\r\n      win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n      if (win) {\r\n        this.revealBoard();\r\n        alert(\"You Win\");\r\n      }\r\n    }\r\n    const {dispatch} = this.props;\r\n    const action = {\r\n      type: 'CELL_CLICK',\r\n      boardData: updatedData,\r\n      gameWon: false,\r\n      mineCount: mines,\r\n    }\r\n    console.log(action)\r\n    dispatch(action);\r\n//////////\r\n    this.setState({\r\n      boardData: updatedData,\r\n      mineCount: mines,\r\n      gameWon: win,\r\n    });\r\n    /////////\r\n  }\r\n\r\n  renderBoard(data) {\r\n    return data.map((dataRow) => {\r\n      return dataRow.map((dataItem) => {\r\n        return (\r\n          <div key={dataItem.x * dataRow.length + dataItem.y}>\r\n            <Cell\r\n              onClick={() => this.handleCellClick(dataItem.x, dataItem.y)}\r\n              cMenu={(e) => this.handleContextMenu(e, dataItem.x, dataItem.y)}\r\n              value={dataItem}\r\n              />\r\n            {(dataRow[dataRow.length - 1] === dataItem) ? <div className=\"clear\" /> : \"\"}\r\n          </div>\r\n        );\r\n      })\r\n    });\r\n  }\r\n\r\n  // Component methods\r\n  // componentWillReceiveProps(nextProps) {\r\n  //   if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n  //     this.setState({\r\n  //       boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n  //       gameWon: false,\r\n  //       mineCount: nextProps.mines,\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    console.log(\"props \", this.props);\r\n    return (\r\n      <div className=\"board\">\r\n        <div className=\"game-info\">\r\n          <span className=\"info\">mines: {this.props.mineCount}</span><br />\r\n          <span className=\"info\">{this.props.gameWon ? \"You Win\" : \"\"}</span>\r\n        </div>\r\n        {\r\n          this.renderBoard(this.props.boardData)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nBoard.propTypes = {\r\n  boardData: PropTypes.array,\r\n  gameWon: PropTypes.bool,\r\n  mineCount: PropTypes.number\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    boardData: state.boardData,\r\n    gameWon: state.gameWon,\r\n    mineCount: state.mineCount\r\n  }\r\n}\r\n\r\nBoard = connect(mapStateToProps)(Board);\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n \r\nclass Game extends React.Component { \r\n\r\n  handleGameStart = () => {\r\n    const {dispatch} = this.props;\r\n    console.log(Board)\r\n    const action = {\r\n      type: 'CREATE_BOARD',\r\n      width: parseInt(document.getElementById('width').value),\r\n      height: parseInt(document.getElementById('height').value),\r\n      mines: parseInt(document.getElementById('mines').value),\r\n      boardData: Board.WrappedComponent.prototype.initBoardData(parseInt(document.getElementById('height').value),parseInt(document.getElementById('width').value),parseInt(document.getElementById('mines').value))\r\n    }\r\n    dispatch(action);\r\n    console.log(\"game action \" ,action)\r\n    console.log(\"game props \", this.props)\r\n    console.log('state in handleGameStart',this.state)\r\n  }\r\n\r\n  render() {\r\n    // const { height, width, mines } = this.state;\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info\">\r\n          <div className=\"instructions\">\r\n            <h4 data-tip data-for=\"tooltip\">Rules</h4>\r\n            <ReactTooltip id=\"tooltip\" place=\"top\" effect=\"solid\">\r\n              You are presented with a board of squares. Some squares contain mines (bombs), others don't. If you click on a square containing a bomb, you lose. If you manage to click all the squares (without clicking on any bombs) or flag all the mines, you win.\r\n              Clicking a square which doesn't have a bomb reveals the number of neighboring squares containing bombs. Use this information plus some guess work to avoid the bombs.\r\n              To open a square, point at the square and click on it. To mark a square you think is a bomb, point and right-click.\r\n            </ReactTooltip>\r\n          </div>\r\n          <h4>Select a level a click \"start\"</h4>\r\n          <span className=\"info\">Choose Size:\r\n          <input type=\"number\" id=\"height\" min=\"4\" max=\"45\" placeholder=\"Enter Height\"/>\r\n          <input type=\"number\" id=\"width\" min=\"4\" max=\"45\" placeholder=\"Enter Width\"/>\r\n          <input type=\"number\" id=\"mines\" min=\"1\" placeholder=\"Enter Mine Qty\"/>\r\n          </span>\r\n          <button onClick={this.handleGameStart}>Start</button>\r\n        </div>\r\n         <Board height={this.props.height} width={this.props.width} mines={this.props.mines} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nGame.propTypes={\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  mines: PropTypes.number,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    width: state.width,\r\n    height: state.height,\r\n    mines: state.mines,\r\n  }\r\n}\r\n\r\nGame = connect(mapStateToProps)(Game)\r\n\r\nexport default Game;","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"header\">\r\n        <p id=\"header-title\">Minesweeper</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"footer\">\r\n        <p>This site is only an example project for <a href=\"https://www.epicodus.com/\">Epicodus</a></p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport Game from './Game';\nimport Header from './Header';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"contain\">\n        <Header />\n        <div id=\"spacing\">\n          <Game />\n        </div>\n        <Footer />\n      </div>\n      \n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import boardDataReducer from './board-data-reducer';\r\nimport gameWonReducer from './game-won-reducer';\r\nimport mineCountReducer from './mine-count-reducer';\r\nimport minesReducer from './mines-reducer';\r\nimport heightReducer from './height-reducer';\r\nimport widthReducer from './width-reducers';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  boardData: boardDataReducer,\r\n  gameWon: gameWonReducer,\r\n  mineCount: mineCountReducer,\r\n  height: heightReducer,\r\n  mines: minesReducer,\r\n  width: widthReducer,\r\n});\r\n\r\nexport default rootReducer;","export default (state = [], action ) => {\r\n  switch (action.type){\r\n    case 'CELL_CLICK':\r\n      return action.boardData;\r\n    case 'UPDATE_BOARD':\r\n      return action.boardData;\r\n    case 'CREATE_BOARD':\r\n      return action.boardData;\r\n    case 'INITIALIZE_BOARD':\r\n      return action.boardData;\r\n    default:\r\n      return state;\r\n  }\r\n};  ","export default (state = false, action ) => {\r\n  switch (action.type){\r\n    case 'CELL_CLICK':\r\n      return action.gameWon;\r\n    case 'INITIALIZE_BOARD':\r\n      return action.gameWon;\r\n    default:\r\n      return state;\r\n  }\r\n};","export default (state = 0, action ) => {\r\n  switch (action.type){\r\n    case 'CELL_CLICK':\r\n      return action.mineCount;\r\n    case 'INITIALIZE_BOARD':\r\n      return action.mineCount;\r\n    default:\r\n      return state;\r\n  }\r\n};","export default (state = 0, action ) => {\r\n  switch (action.type){\r\n    case 'CREATE_BOARD':\r\n      return action.height;\r\n    default:\r\n      return state;\r\n  }\r\n};","export default (state = 0, action ) => {\r\n  switch (action.type){\r\n    case 'CREATE_BOARD':\r\n      return action.mines;\r\n    default:\r\n      return state;\r\n  }\r\n};","export default (state = 0, action ) => {\r\n  switch (action.type){\r\n    case 'CREATE_BOARD':\r\n      return action.width;\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './reducers/index';\r\nimport { createStore } from 'redux';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}